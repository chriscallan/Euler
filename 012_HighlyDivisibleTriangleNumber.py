# Problem 12
# The sequence of triangle numbers is generated by adding the natural numbers.
# So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
#
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
#
# Let us list the factors of the first seven triangle numbers:
#
#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.
#
# What is the value of the first triangle number to have over five hundred divisors?
from math import sqrt, ceil


divisors = []
target_divisors = 500
seed_value = 1
running_total = seed_value   # this will always be the case for the value of '1'

while len(divisors) < target_divisors:
    temp_value = seed_value + 1
    while temp_value > 1:
        running_total += temp_value
        temp_value -= 1
    if running_total % 300 == 0:
        print("running_total is: {0}".format(running_total))
    for i in range(2, int(ceil(sqrt(running_total))) + 1):
        if running_total % i == 0 and i not in divisors:
            divisors.append(i)
            divisors.append(running_total / i)
    if len(divisors) < target_divisors:
        divisors = []
        seed_value += 1
        running_total = 1       # reset to the default value so we can try the next number

print("number with {0} divisors is: {1}, by {2}".format(target_divisors, running_total, divisors))